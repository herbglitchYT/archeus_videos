[Action Press] 1:1 1:0 9:1 9:0 42:1 34:1 34:0 42:0 23:1 23:0
[Action  Type] #include "arc/std/bool.h"
[Action Press] 29:1 28:1 28:0 29:0
[Action  Type] #include <stdint.h>
[Action Press] 29:1 28:1 28:0 29:0
[Action Press] 29:1 28:1 28:0 29:0
[Action Press] 14:1 14:0
[Action  Type] /**
[Action Press] 29:1 28:1 28:0 29:0
[Action  Type] @brief a dynamic array type
[Action Press] 29:1 28:1 28:0 29:0
[Action Press] 1:1 1:0 32:1 32:0 11:1 11:0 31:1 31:0
[Action  Type] */
[Action Press] 29:1 28:1 28:0 29:0
[Action Press] 14:1 14:0
[Action  Type] typedef struct ARC_Vector ARC_Vector;
[Action Press] 29:1 28:1 28:0 29:0
[Action Press] 29:1 28:1 28:0 29:0
[Action  Type] /**
[Action Press] 29:1 28:1 28:0 29:0
[Action  Type] @brief a callback that allows the user to define a way to check the data stored in a vector for a match
[Action Press] 29:1 28:1 28:0 29:0
[Action Press] 29:1 28:1 28:0 29:0
[Action  Type] @param[in] dataA the first data to check
[Action Press] 29:1 28:1 28:0 29:0
[Action  Type] @param[in] dataB the second data to check
[Action Press] 29:1 28:1 28:0 29:0
[Action Press] 29:1 28:1 28:0 29:0
[Action  Type] @return ARC_True when dataA == dataB, and ARC_False otherwise
[Action Press] 29:1 28:1 28:0 29:0
[Action Press] 1:1 1:0 32:1 32:0 11:1 11:0 31:1 31:0
[Action  Type] */
[Action Press] 29:1 28:1 28:0 29:0
[Action  Type] typedef ARC_Bool (* ARC_Vector_CompareDataFn)(void *dataA, void *dataB);
[Action Press] 29:1 28:1 28:0 29:0
[Action Press] 29:1 28:1 28:0 29:0
[Action  Type] /**
[Action Press] 29:1 28:1 28:0 29:0
[Action  Type] @brief creates an ARC_Vector which is an "expandable" array
[Action Press] 29:1 28:1 28:0 29:0
[Action Press] 29:1 28:1 28:0 29:0
[Action  Type] @note for this basic implementation, the array will double in size every time the capacity is hit
[Action Press] 29:1 28:1 28:0 29:0
[Action  Type] @note the array will also half in size when the array is only half filled
[Action Press] 29:1 28:1 28:0 29:0
[Action Press] 29:1 28:1 28:0 29:0
[Action  Type] @param[out] vector        ARC_Vector to initialize
[Action Press] 29:1 28:1 28:0 29:0
[Action  Type] @param[in]  compareDataFn a callback that checks if data stored in the array matches,
[Action Press] 29:1 28:1 28:0 29:0
[Action  Type]                           if set to NULL and ARC_Vector_Remove is called, the pointer addresses will be compared
[Action Press] 29:1 28:1 28:0 29:0
[Action Press] 1:1 1:0 32:1 32:0 11:1 11:0 31:1 31:0
[Action  Type] */
[Action Press] 29:1 28:1 28:0 29:0
[Action  Type] void ARC_Vector_Create(ARC_Vector **vector, ARC_Vector_CompareDataFn *compareDataFn);
[Action Press] 29:1 28:1 28:0 29:0
[Action Press] 29:1 28:1 28:0 29:0
[Action  Type] /**
[Action Press] 29:1 28:1 28:0 29:0
[Action  Type] @brief destroys an ARC_Vector
[Action Press] 29:1 28:1 28:0 29:0
[Action Press] 29:1 28:1 28:0 29:0
[Action  Type] @note this will not free the items stored in the vector
[Action Press] 29:1 28:1 28:0 29:0
[Action  Type] @note please make sure to clear and free the children before destroying an ARC_Vector
[Action Press] 29:1 28:1 28:0 29:0
[Action Press] 29:1 28:1 28:0 29:0
[Action  Type] @param[in] vector ARC_Vector to free
[Action Press] 29:1 28:1 28:0 29:0
[Action Press] 1:1 1:0 32:1 32:0 11:1 11:0 31:1 31:0
[Action  Type] */
[Action Press] 29:1 28:1 28:0 29:0
[Action  Type] void ARC_Vector_Destroy(ARC_Vector *vector);
[Action Press] 29:1 28:1 28:0 29:0
[Action Press] 29:1 28:1 28:0 29:0
[Action  Type] /**
[Action Press] 29:1 28:1 28:0 29:0
[Action  Type] @brief adds an item to an ARC_Vector
[Action Press] 29:1 28:1 28:0 29:0
[Action Press] 29:1 28:1 28:0 29:0
[Action  Type] @note this will error if you add more than 4,294,967,295 items (the max value of an unsigned int 32)
[Action Press] 29:1 28:1 28:0 29:0
[Action Press] 29:1 28:1 28:0 29:0
[Action  Type] @param[in] vector ARC_Vector to add to
[Action Press] 29:1 28:1 28:0 29:0
[Action  Type] @param[in] data   data that is being added
[Action Press] 29:1 28:1 28:0 29:0
[Action Press] 1:1 1:0 32:1 32:0 11:1 11:0 31:1 31:0
[Action  Type] */
[Action Press] 29:1 28:1 28:0 29:0
[Action  Type] void ARC_Vector_Add(ARC_Vector *vector, void *data);
[Action Press] 29:1 28:1 28:0 29:0
[Action Press] 29:1 28:1 28:0 29:0
[Action  Type] /**
[Action Press] 29:1 28:1 28:0 29:0
[Action  Type] @brief removes an item from a matching item in an ARC_Vector
[Action Press] 29:1 28:1 28:0 29:0
[Action Press] 29:1 28:1 28:0 29:0
[Action  Type] @note this function uses the ARC_Vector_CompareDataFn that the ARC_Vector was created with
[Action Press] 29:1 28:1 28:0 29:0
[Action  Type] @note this function will not throw an error if there is no match
[Action Press] 29:1 28:1 28:0 29:0
[Action Press] 29:1 28:1 28:0 29:0
[Action  Type] @param[in] vector ARC_Vector to remove from
[Action Press] 29:1 28:1 28:0 29:0
[Action  Type] @param[in] data   matching data to remove
[Action Press] 29:1 28:1 28:0 29:0
[Action Press] 1:1 1:0 32:1 32:0 11:1 11:0 31:1 31:0
[Action  Type] */
[Action Press] 29:1 28:1 28:0 29:0
[Action  Type] void ARC_Vector_Remove(ARC_Vector *vector, void *data);
[Action Press] 29:1 28:1 28:0 29:0
[Action Press] 29:1 28:1 28:0 29:0
[Action  Type] /**
[Action Press] 29:1 28:1 28:0 29:0
[Action  Type] @brief removes an item from an ARC_Vector at an index
[Action Press] 29:1 28:1 28:0 29:0
[Action Press] 29:1 28:1 28:0 29:0
[Action  Type] @note this function will error if trying to remove an index that is outside the bounds of the ARC_Vector
[Action Press] 29:1 28:1 28:0 29:0
[Action Press] 29:1 28:1 28:0 29:0
[Action  Type] @param[in] vector ARC_Vector to remove from
[Action Press] 29:1 28:1 28:0 29:0
[Action  Type] @param[in] index  position of data to remove
[Action Press] 29:1 28:1 28:0 29:0
[Action Press] 1:1 1:0 32:1 32:0 11:1 11:0 31:1 31:0
[Action  Type] */
[Action Press] 29:1 28:1 28:0 29:0
[Action  Type] void ARC_Vector_RemoveIndex(ARC_Vector *vector, uint32_t index);
[Action Press] 29:1 28:1 28:0 29:0
[Action Press] 29:1 28:1 28:0 29:0
[Action  Type] /**
[Action Press] 29:1 28:1 28:0 29:0
[Action  Type] @brief gets the current size of an ARC_Vector as an unsigned 32 bit integer
[Action Press] 29:1 28:1 28:0 29:0
[Action Press] 29:1 28:1 28:0 29:0
[Action  Type] @param[in] vector ARC_Vector to get current size from
[Action Press] 29:1 28:1 28:0 29:0
[Action Press] 29:1 28:1 28:0 29:0
[Action  Type] @return the current size as a unsigned 32 bit integer
[Action Press] 29:1 28:1 28:0 29:0
[Action Press] 1:1 1:0 32:1 32:0 11:1 11:0 31:1 31:0
[Action  Type] */
[Action Press] 29:1 28:1 28:0 29:0
[Action  Type] uint32_t ARC_Vector_GetSize(ARC_Vector *vector);
[Action Press] 29:1 28:1 28:0 29:0
[Action Press] 29:1 28:1 28:0 29:0
[Action  Type] /**
[Action Press] 29:1 28:1 28:0 29:0
[Action  Type] @brief gets an item from an ARC_Vector at a position index
[Action Press] 29:1 28:1 28:0 29:0
[Action Press] 29:1 28:1 28:0 29:0
[Action  Type] @note this function will error if trying to get an index that is outside the bounds of the ARC_Vector
[Action Press] 29:1 28:1 28:0 29:0
[Action Press] 29:1 28:1 28:0 29:0
[Action  Type] @param[in] vector ARC_Vector to get data from
[Action Press] 29:1 28:1 28:0 29:0
[Action  Type] @param[in] index  position of data to get
[Action Press] 29:1 28:1 28:0 29:0
[Action Press] 29:1 28:1 28:0 29:0
[Action  Type] @return a void * item, or NULL on error
[Action Press] 29:1 28:1 28:0 29:0
[Action Press] 1:1 1:0 32:1 32:0 11:1 11:0 31:1 31:0
[Action  Type] */
[Action Press] 29:1 28:1 28:0 29:0
[Action  Type] void *ARC_Vector_Get(ARC_Vector *vector, uint32_t index);
[Action Press] 29:1 28:1 28:0 29:0
[Action Press] 111:1 111:0
[Action Press] 1:1 1:0
